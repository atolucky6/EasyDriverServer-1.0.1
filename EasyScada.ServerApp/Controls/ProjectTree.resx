<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAADe
        CQAAAk1TRnQBSQFMAgEBAgEAAQgBAAEIAQABEAEAARABAAT/ARkBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABEAMAAQEBAAEYBgABDBIAA/sBzgHGAcED/icAA0wBTQJMAU0CTAFNAkwBTQJMAU0CTAFNAkwBTQJM
        AU0CTAFNAkwBTQJMAU0CTAFNAkwBTQVMAawBqgGpYAABzgHGAcEBfgFjAVIBtgGpAaED/iQAAX0BdQFv
        AYgBcwFmAVABWAFFAVEBXQFCAW8BYgFaAVABWgFDAVABWgFDAW4BYgFaAVEBXQFCAVABWAFFAW4BYwFb
        AVABTwFOAU8BTgFNAY0BdgFoAV0BWAFUAUwBSwFKYAAD/gG4AasBowF+AWMBUgG0AacBngHxAfAB7wHG
        AbwBtgHGAbwBtgHhAd0B2xgAAX0BdQFvAYgBdAFmAZQBjgFuAZoBlgJvAWMBWwGZAZMBcAGZAZMBcQFu
        AWIBWwGaAZYBbwGUAY4BbgFvAWMBWwGtAZgBigGUAYQBeQGMAXYBaAFdAVgBVAFzAWgBYmMAA/4BtgGp
        AaEBfgFjAVIBhgFvAV8BfgFjAVIBfgFjAVIBfgFjAVIB2QHUAdAB+QH6AfkD/w8AAX0BdQFvAYgBdAFm
        AYEBlgFMAYMBnAFJAW8BYwFbAYMBmwFKAYUBmgFNAW4BYgFbAYIBnQFHAYEBlgFMAW8BYwFbAa0BmAGK
        AZQBhAF5AYwBdgFoAV0BWAFUAXMBaAFiZgAB8QHwAe8BhgFtAV4BfgFjAVIBfgFjAVIBfgFjAVIBfgFj
        AVIBmAGGAXUBiAHOAVMBvwHhAaUPAAF9AXUBbwGIAXQBZgGGAZQBVQGMAZoBWAFvAWMBWwGLAZgBWAGN
        AZgBWgFuAWIBWwGLAZsBVQGJAZMBWgFvAWMBWwGtAZgBigGUAYQBeQGMAXYBaAFdAVgBVAFzAWgBYmYA
        AcQBuQGzAX4BYwFSAX4BYwFSAX4BYwFSAX4BYwFSAZcBhQF1AYcBxwFUAXMBzAEwAdsB6wHPAegB8QHi
        A/8JAAF9AXUBbwGIAXQBZgGCAZYBTQGGAZsBTgFvAWMBWwGGAZoBTgGIAZkBUgFuAWIBWwGFAZwBSwGF
        AZUBUgFvAWMBWwGtAZgBigGUAYQBeQGMAXYBaAFdAVgBVAFzAWgBYmYAAcQBuQGzAX4BYwFSAX4BYwFS
        AX4BYwFSAZcBhQF1AYcBxwFUAXMBzAEwAdsB6wHPAdAB5wG/AXEBzAEuAc8B5wG9CQABfQF1AW8BiAF0
        AWYBhQGUAVMBhwGbAVABbwFjAVsBiAGZAVMBiAGZAVMBbgFiAVsBiQGbAVIBhQGUAVMBbwFjAVsBrQGY
        AYoBlAGEAXkBjAF2AWgBXQFYAVQBcwFoAWJmAAHgAdwB2QF+AWMBUgF+AWMBUgGWAYQBdQGIAccBUwFz
        AcwBMAHbAesBzwHQAecBvwFxAcwBLgGPAcQBXgHZAdgB0AkAAX0BdQFvAYgBdAFmAY0BkQFiAZMBmAFk
        AW8BYwFbAZIBlgFkAZIBlgFkAW4BYgFbAZMBmAFjAY0BkQFiAW8BYwFbAa0BmAGKAZQBhAF5AYwBdgFo
        AV0BWAFUAXMBaAFiaQAB3wHaAdcBlwGGAXUBhwHHAVQBcwHMATAB2wHrAc8B0AHnAb8BcQHMAS4BjwHF
        AV4BkQF9AW0BgAFlAVQB2wHWAdMGAAF9AXUBbwGIAXQBZgF9AZgBQwF+AZ4BQAFvAWMBWwF+AZwBQQGA
        AZwBRQFuAWIBWwF8AZ8BPAF9AZgBQwFvAWMBWwGtAZgBigGUAYQBeQGMAXYBaAFdAVgBVAFzAWgBYmkA
        AfkB+gH5AYgBzgFTAXMBzAEwAd0B7AHSAdAB5wG/AXEBzAEuAY8BxAFeAZABewFtAX4BYwFSAX4BYwFS
        AX4BYwFSA/wDAAF9AXUBbwGIAXQBZgGXAYwBdAGfAZQBegFvAWMBWwGeAZIBeQGeAZIBeQFuAWIBWwGg
        AZUBeQGXAYwBdAFvAWMBWwGtAZgBigGUAYQBeQGMAXYBaAFdAVgBVAFzAWgBYmkAA/8BwwHjAasB2wHr
        Ac8B0AHnAb8BcQHMAS4BjwHFAV4BkQF9AW0BfgFjAVIBfgFjAVIBfgFjAVIBfgFjAVIC/AH7AwABfQF1
        AW8BiAF0AWYBnAGKAX4BpgGSAYYBbwFjAVsBpAGQAYQBpAGQAYQBbgFiAVsBpwGTAYYBnAGKAX4BbwFj
        AVsBrQGYAYoBlAGEAXkBjAF2AWgBXQFYAVQBcwFoAWJvAAHnAfEB4QFxAcwBLgGQAcYBYQGQAXsBbQF+
        AWMBUgF+AWMBUgF+AWMBUgF+AWMBUgGUAX8BcQH+Av0DAAF9AXUBbwGIAXQBZgGcAYoBfgGmAZIBhgFv
        AWMBWwGkAZABhAGkAZABhAFuAWIBWwGnAZMBhgGcAYoBfgFvAWMBWwGtAZgBigGUAYQBeQGMAXYBaAFd
        AVgBVAFzAWgBYm8AA/8BzwHnAb0B2gHYAdEBgAFlAVQBfgFjAVIBfgFjAVIBfgFjAVIBkQF7AW0BvQGw
        AaoD/gMAAX0BdQFvAYgBdAFmAZwBigF+AaYBkgGGAW8BYwFbAaQBkAGEAaQBkAGEAW4BYgFbAacBkwGG
        AZwBigF+AW8BYwFbAa0BmAGKAZQBhAF5AYwBdgFoAV0BWAFUAXMBaAFieAAB3AHXAdMBfgFjAVIBfgFj
        AVIBlAF/AXEBvQGwAaoBfgFjAVIBtgGpAaED/gF9AXUBbwGIAXMBZgFpAXMBTgFrAXoBSAFvAWIBWwFi
        AW8BhQFiAW8BhQFuAWIBWwFhAVoBigFjAVsBfAFvAWMBWwF1AWwBZgFpAWIBXgGMAXYBaAFdAVgBVAFz
        AWgBYnsABfwB+wH+Av0D/gG2AakBoQF+AWMBUgHOAcYBwQFYAVYBVAFnAV4BWAFiAVsBVQFiAVsBVQFg
        AVkBVAFiAVsBVgFiAVsBVgFgAVkBVAFiAVsBVgFiAVsBVgFgAVkBVQFiAVsBVgFiAVsBVgFoAV8BWQFQ
        Ak4BdAFqAWOHAAP+Ac4BxgHBA/sBsgGuAasBqAGaAY8BiAF9AXYBiAF9AXYBiAF9AXYBiAF9AXYBiAF9
        AXYBiAF9AXYBiAF9AXYBiAF9AXYBiAF9AXYBiAF9AXYBiAF9AXYBiAF9AXYBpQGWAYwBcQFqAWZgAAFC
        AU0BPgcAAT4DAAEoAwABQAMAARADAAEBAQABAQUAAYAXAAP/AQABHwH/BgABDwH/BwAB/wYAAYABHwYA
        AcABHwYAAcABBwYAAcABBwYAAcABBwYAAeABAwYAAeABAQYAAeABAQYAAfgBAQYAAfgBAQYAAf8HAAH/
        AYAGAAH/AfgGAAs=
</value>
  </data>
</root>